Since you don’t already have a custom service account for your Cloud Functions, let’s create one in your Google Cloud project. A custom service account allows you to grant specific permissions to your Cloud Functions, ensuring better security and control compared to using the default service account. Below are the steps to create a custom service account for Cloud Functions and configure it for use in your retinal image analysis application.

---

### Steps to Create a Custom Service Account for Cloud Functions

#### Step 1: Create a Custom Service Account
1. **Navigate to Service Accounts**:
   - Open the Google Cloud Console (https://console.cloud.google.com/).
   - Go to **IAM & Admin** > **Service Accounts** in the left-hand menu.
2. **Create a New Service Account**:
   - Click **Create Service Account** at the top of the page.
   - **Service Account Details**:
     - **Name**: `retinal-functions-sa` (or any name you prefer, e.g., `cloud-functions-retinal`).
     - **Service Account ID**: This will auto-generate based on the name (e.g., `retinal-functions-sa@<project-id>.iam.gserviceaccount.com`).
     - **Description**: `Service account for Cloud Functions in the retinal image analysis app`.
   - Click **Create and Continue**.
3. **Grant Roles to the Service Account**:
   - In the **Grant this service account access to project** section:
     - **Role 1**: Select **Cloud Functions Invoker** (`roles/cloudfunctions.invoker`) to allow the service account to invoke Cloud Functions.
     - **Role 2**: Select **Cloud Functions Runtime** (`roles/cloudfunctions.runtimeServiceAgent`) to allow the service account to run Cloud Functions.
     - **Role 3**: Select **Storage Admin** (`roles/storage.admin`) to allow access to GCS (as needed for uploading images).
     - **Role 4**: Select **BigQuery Admin** (`roles/bigquery.admin`) to allow access to BigQuery (for storing metadata and results).
     - **Role 5**: Select **Pub/Sub Admin** (`roles/pubsub.admin`) to allow publishing and subscribing to Pub/Sub topics (for email notifications and batch processing).
     - **Role 6**: Select **AI Platform Admin** (`roles/aiplatform.admin`) to allow interaction with Vertex AI (for inference and retraining).
   - Click **Continue**.
4. **Grant Users Access to This Service Account (Optional)**:
   - In the **Grant users access to this service account** section, you can leave this blank unless you need to allow specific users to manage this service account.
   - Click **Done** to create the service account.

#### Step 2: Verify the Service Account
- After creation, you’ll see the new service account in the **Service Accounts** list.
- Note the service account email, which will look like:
  ```
  retinal-functions-sa@<project-id>.iam.gserviceaccount.com
  ```
  Replace `<project-id>` with your actual project ID (e.g., `my-retinal-project`).

#### Step 3: Use the Custom Service Account in Cloud Functions
You’ll need to update your Cloud Functions to use this custom service account. This can be done during deployment.

- **Update Existing Cloud Functions**:
  - Redeploy each Cloud Function with the `--service-account` flag. For example:
    ```bash
    gcloud functions deploy upload_image \
      --region=us-central1 \
      --runtime=python310 \
      --trigger-http \
      --allow-unauthenticated \
      --service-account=retinal-functions-sa@<project-id>.iam.gserviceaccount.com
    ```
  - Repeat for all functions (`register_doctor`, `send_activation_email`, `activate_account`, `add_patient`, `process_image_batch`, `submit_feedback`, `get_results`).
- **Future Deployments**:
  - Always include the `--service-account` flag when deploying new Cloud Functions to ensure they use this custom service account.

#### Step 4: Update IAM Permissions for GCS (From Previous Step)
Now that you have the custom service account, update the GCS bucket permissions to grant access to this service account (as you were doing earlier).

1. **Navigate to GCS Bucket**:
   - Go to **Cloud Storage** > **Buckets**.
   - Click on your bucket (`retinal-images-<project-id>`).
2. **Update Permissions**:
   - Go to the **Permissions** tab.
   - Click **Add**.
   - **Add Principals**: Enter the service account email:
     ```
     retinal-functions-sa@<project-id>.iam.gserviceaccount.com
     ```
   - **Role**: Select **Storage Admin** (`roles/storage.admin`).
   - **IAM Condition**: Leave as `None`.
   - Click **Save**.

#### Step 5: Grant Additional Permissions (If Needed)
Ensure the service account has all necessary permissions for other services:

- **Pub/Sub**:
  ```bash
  gcloud pubsub topics add-iam-policy-binding account-activation \
    --member=serviceAccount:retinal-functions-sa@<project-id>.iam.gserviceaccount.com \
    --role=roles/pubsub.publisher

  gcloud pubsub subscriptions add-iam-policy-binding account-activation-sub \
    --member=serviceAccount:retinal-functions-sa@<project-id>.iam.gserviceaccount.com \
    --role=roles/pubsub.subscriber

  gcloud pubsub topics add-iam-policy-binding process-image-batch \
    --member=serviceAccount:retinal-functions-sa@<project-id>.iam.gserviceaccount.com \
    --role=roles/pubsub.publisher

  gcloud pubsub subscriptions add-iam-policy-binding process-image-batch-sub \
    --member=serviceAccount:retinal-functions-sa@<project-id>.iam.gserviceaccount.com \
    --role=roles/pubsub.subscriber
  ```

- **BigQuery**:
  ```bash
  gcloud projects add-iam-policy-binding <project-id> \
    --member=serviceAccount:retinal-functions-sa@<project-id>.iam.gserviceaccount.com \
    --role=roles/bigquery.admin
  ```

- **Vertex AI**:
  ```bash
  gcloud projects add-iam-policy-binding <project-id> \
    --member=serviceAccount:retinal-functions-sa@<project-id>.iam.gserviceaccount.com \
    --role=roles/aiplatform.admin
  ```

- **Firebase Admin** (for authentication):
  ```bash
  gcloud projects add-iam-policy-binding <project-id> \
    --member=serviceAccount:retinal-functions-sa@<project-id>.iam.gserviceaccount.com \
    --role=roles/firebaseadmin
  ```

#### Step 6: Test the Setup
- Redeploy one of your Cloud Functions (e.g., `upload_image`) using the new service account.
- Test uploading an image via the mobile app or a test script.
- Verify the image is uploaded to GCS and metadata is stored in BigQuery.

---

### Summary
- Created a custom service account (`retinal-functions-sa@<project-id>.iam.gserviceaccount.com`) with the necessary roles.
- Updated Cloud Functions to use this service account.
- Granted the service account access to GCS, Pub/Sub, BigQuery, Vertex AI, and Firebase.
- Tested the setup to ensure the service account works as expected.

You can now proceed with the remaining steps of the solution setup (e.g., setting up BigQuery, deploying the Vertex AI model). Let me know if you need assistance!